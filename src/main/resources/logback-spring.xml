<?xml version="1.0" encoding="UTF-8"?>

<!-- 级别从高到低 OFF 、 FATAL 、 ERROR 、 WARN 、 INFO 、 DEBUG 、 TRACE 、 ALL -->
<!-- 日志输出规则 根据当前ROOT 级别，日志输出时，级别高于root默认的级别时 会输出 -->
<!-- 以下 每个配置的 filter 是过滤掉输出文件里面，会出现高级别文件，依然出现低级别的日志信息，通过filter 过滤只记录本级别的日志 -->
<!-- scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
     scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒当scan为true时，此属性生效。默认的时间间隔为1分钟。
     debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<!-- <configuration scan="true" scanPeriod="60 seconds" debug="false"> -->
<configuration debug="true">

    <!-- 动态日志级别 -->
    <!--<jmxConfigurator />-->
    <!-- 定义日志的根目录，加斜杠是定义在本磁盘根目录下，不加则是定义在本项目的根目录下 -->
    <property name="LOG_HOME" value="logs" />
    <!-- 定义日志文件名称 -->
    <property name="logName" value="bootLog"></property>

    <!-- 日志最大的历史 365天 -->
    <property name="maxHistory" value="365" />

    <!-- 彩色日志依赖的渲染类 -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />
    <conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter" />
    <conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter" />
    <!-- 彩色日志格式 -->
    <property name="CONSOLE_LOG_PATTERN" value="${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}" />

    <!-- ch.qos.logback.core.ConsoleAppender 表示控制台输出 -->
    <appender name="inLine" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <!-- springProfile 标签可以指定某段配置只在某个环境下生效 -->
            <springProfile name="dev">
                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} ---> [%thread] ---> %-5level %logger{50} - %msg%n</pattern>
                <charset>utf8</charset>
            </springProfile>
            <springProfile name="!dev">
                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} ==== [%thread] ==== %-5level %logger{50} - %msg%n</pattern>
            </springProfile>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>DEBUG</level>
        </filter>

        <!--
        日志输出格式：
            %d        表示日期时间，
            %thread   表示线程名，
            %-5level  级别从左显示5个字符宽度
            %logger{50} 表示logger名字最长50个字符，否则按照句点分割。
            %msg      日志消息，
            %n        是换行符

        encoder 的主要工作有两个：①
            1，将一个event事件转换成一组byte数组，②将转换后的字节数据输出到文件中。
            2，encoder组件是在0.9.19版本之后才引进来的。在以前的版本中，appender是使用layout（将一个event事件转换成一个字符串），
                然后使用【java.io.writer】对象将字符串写入到文件中。

        自从0.9.19版本之后，Fileappender和他的子类是期望使用encoder，不再使用layout。因为layout仅仅完成了将一个 event事件转换成
        一个字符串这一个功能。此外，layout不能控制将字符串写出到文件。layout不能整合event事件到一组中。而 encoder 不仅仅能按照格
        式进行转化，而且还能将数据写入到文件中。
        -->
        <!--<layout class="ch.qos.logback.classic.PatternLayout">-->
            <!--<springProfile name="dev">-->
                <!--<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} -&ndash;&gt; [%thread] -&ndash;&gt; %-5level %logger{50} - %msg%n</pattern>-->
            <!--</springProfile>-->
        <!--</layout>-->
    </appender>

    <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 RollingFileAppender -->
    <appender name="file" class="ch.qos.logback.core.rolling.RollingFileAppender">

        <!-- 指定日志文件的名称 -->
        <file>${LOG_HOME}/${logName}.log</file>

        <!-- 按级别输出日志 -->
        <!--<filter class="ch.qos.logback.classic.filter.ThresholdFilter">-->
            <!--<level>ERROR</level>-->
            <!-- 用于配置符合过滤条件的操作 -->
            <!--<onMatch>ACCEPT</onMatch>-->
            <!-- 用于配置不符合过滤条件的操作 -->
            <!--<onMismatch>DENY</onMismatch>-->
        <!--</filter>-->
        <encoder>
            <pattern>
                <!-- 设置日志输出格式 -->
                <!--%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %logger - %msg%n-->
                %d{yyyy-MM-dd HH:mm:ss.SSS} [ %thread ] - [ %-5level ] [ %logger{50} : %line ] - %msg%n
            </pattern>
        </encoder>

        <!-- 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。-->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--
            滚动时产生的文件的存放位置及文件名称 %d{yyyy-MM-dd}：按天进行日志滚动 %i：当文件大小超过maxFileSize时，按照 i 进
            行文件滚动，下列格式是死的，不可修改。
            最好使用绝对路径存放 log 文件夹。
            -->
            <fileNamePattern>${LOG_HOME}/${logName}_%d{yyyy-MM-dd}_%i.log</fileNamePattern>

            <!--
            可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每天滚动，
            且maxHistory是365，则只保存最近365天的文件，删除之前的旧文件。注意，删除旧文件是，
            那些为了归档而创建的目录也会被删除。
            -->
            <MaxHistory>${maxHistory}</MaxHistory>
            <!--
            当日志文件超过maxFileSize指定的大小是，根据上面提到的%i进行日志文件滚动 注意此处配置 SizeBasedTriggeringPolicy 是
            无法实现按文件大小进行滚动的，必须配置timeBasedFileNamingAndTriggeringPolicy。
            -->
            <maxFileSize>50MB</maxFileSize>
        </rollingPolicy>

        <!-- 日志输出格式： -->
        <!--<layout class="ch.qos.logback.classic.PatternLayout">-->
            <!--<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [ %thread ] - [ %-5level ] [ %logger{50} : %line ] - %msg%n</pattern>-->
        <!--</layout>-->
    </appender>

    <!--
       logger主要用于存放日志对象，也可以定义日志类型、级别，控制日志及控制台的输出级别
       name：表示匹配的logger类型前缀，也就是包的前半部分。
       level：要记录的日志级别，包括 TRACE < DEBUG < INFO < WARN < ERROR。
       additivity：作用在于children-logger是否使用 rootLogger配置的appender进行输出，
            false：表示只用当前logger的appender-ref。
            true： 表示当前logger的appender-ref和rootLogger的appender-ref都有效
   -->
    <logger name="org.springframework" level="DEBUG" additivity="false"/>
    <logger name="hyman.springbootdemo" level="DEBUG" />

    <!--
       root与logger是父子关系，没有特别定义则默认为root，任何一个类只会和一个logger对应，
       要么是定义的logger，要么是root，判断的关键在于找到这个logger，然后判断这个logger的appender和level。
    -->
    <root level="INFO">
        <appender-ref ref="inLine"/>
        <appender-ref ref="file"/>
    </root>
</configuration>