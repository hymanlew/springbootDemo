#======================================================

# 该文件同样不允许有空格，和引号
# properties文件都需要写全，yml前面相同的可以不写，一层对应一层就好了。
# 在yml文件中有些细节需要注意，冒号后面要空一格再写值，虽然在IDE中都会自动空一格。

# yml文件的好处，天然的树状结构，一目了然，实质上跟properties是差不多的。官方给的很多demo，都是用yml文件配置的。
# 注意点：
#  1，原有的key，例如spring.jpa.properties.hibernate.dialect，按“.”分割，都变成树状的配置
#  2，key后面的冒号，后面一定要跟一个空格
#  3，把原有的application.properties删掉。然后一定要执行一下  maven -X clean install

# 另外 properties 文件加载时是优先于 yml 文件的

#======================================================

#自定义指定的 tomcat运行端口
server.port=8888

#自定义程序启动时符号，默认路径为 resource
banner=classpath:banner.txt

#======================================================

#自定义配置信息（entity：message）
title=hyman
description=testMessage


#最好加入 start，end 标识
#thymeleaf start

# 模板编码，See also StandardTemplateModeHandlers.
#spring.thymeleaf.mode=HTML5

# 默认配置下，thymeleaf对.html的内容要求很严格，会由于无结束 /标签而报错，所以设置为 LEGACYHTML5，即执行不严格检查
# 它同时需要导入 nekohtml包来支持。
spring.thymeleaf.mode=LEGACYHTML5
# Template encoding.
spring.thymeleaf.encoding=UTF-8
# Prefix that gets prepended to view names when building a URL.
spring.thymeleaf.prefix=classpath:/templates/
# Suffix that gets appended to view names when building a URL.
spring.thymeleaf.suffix=.html

#开发时关闭缓存,不然没法看到实时页面
spring.thymeleaf.cache=false
server.tomcat.access_log_enabled=true
server.tomcat.basedir=target/tomcat

# 启用MVC Thymeleaf视图分辨率
spring.thymeleaf.enabled=true


#以下配置可以省略
# 检查模板是否存在，然后再呈现
#spring.thymeleaf.check-template-location=true
# 应该从解决方案中排除的视图名称的逗号分隔列表
#spring.thymeleaf.excluded-view-names=
# 可以解析的视图名称的逗号分隔列表
#spring.thymeleaf.view-names=
# 链中模板解析器的顺序
#spring.thymeleaf.template-resolver-order= o

#thymeleaf end

#======================================================

# rewriteBatchedStatements，开启批量处理的功能。
# allowMultiQueries，是否允许开启批量处理的功能。所以这两个是配套的，不可拆开使用。
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/test?serverTimezone=GMT%2B8&autoReconnect=true&rewriteBatchedStatements=true&allowMultiQueries=true&useSSL=false&useUnicode=true&characterEncoding=utf8&characterSetResults=utf-8
spring.datasource.username=root
spring.datasource.password=root
#spring.datasource.password=123456


# 加载 mapper 配置文件，本项目中直接使用 @mapper 注解，使用接口的方式，不使用 xml 文件
#mybatis.mapper-locations=classpath:mapper/*Mapper.xml
# 定义别名
#mybatis.type-aliases-package=hyman.springbootdemo.entity
# 如果查询结果是null也要返回对应的字段
#mybatis.configuration.call-setters-on-nulls=true

#======================================================

# springboot 默认使用 jackson 解析 json（当然这里也是可以配置使用其他 json 解析框架）。
# 在不配置其他 json 解析的情况下，我们可以通过 spring boot 提供的注解和配置 来让 jackson 帮助我们提高开发效率。

# 如果在配置文件中，不进行配置，实体类也不添加注解，则 spring 无法接收时间参数（400），json 输出 "2018-03-29T09:45:31.513+0000"
# 使用 @ResponseBody @RequestBody， Date 类型对象入参，返回json格式化
spring.jackson.date-format=yyyy-MM-dd HH:mm:ss
spring.jackson.time-zone=GMT+8

# 如果个别实体需要使用其他格式的 pattern，在实体上加入注解即可（demo/testdemo）

# 使用 @ResponseBody 时 忽略 json 中值为null的属性，加上配置，或是在类上声明注解
#spring.jackson.default-property-inclusion=non_null
#@JsonInclude(JsonInclude.Include.NON_NULL)

#======================================================

# 设置监控，及管理的安全认证监控状态是否启用，以及监控端口。因为只有在非安全认证时才能测试访问结果。也可以使用命令来查看当前项
# 目对本服务器的使用状态信息，包括内存，线程使用情况。类似于系统的任务管理器。cmd -- jconsole 命令）
# 直接 http://localhost:8081，会显示当前访问路径的基本状态信息（基于 8081 端口的），通常都是 404.
management.security.enabled=false
management.port=8081


# path为本机的log地址，logging.level后面可以根据包路径配置不同资源的log级别。注意该方式只能设置在本文件中，不能在 yml 文件中。

# 在当前磁盘的根路径下创建 logs文件夹；使用 spring.log 作为默认文件。不指定路径则是在当前项目下生成springboot.log日志
logging.path=/logs
#logging.path=F:/log

# 在控制台输出的日志的格式
logging.pattern.console=%d{yyyy‐MM‐dd} [%thread] %‐5level %logger{50} ‐ %msg%n

# 指定文件中日志输出的格式
logging.pattern.file=%d{yyyy‐MM‐dd} === [%thread] === %‐5level === %logger{50} ==== %msg%n

#logging.level.hyman.springbootdemo=DEBUG
#logging.level.org.springframework.web=INFO



#======================================================